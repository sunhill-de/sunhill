<?php
/**
 * @file Analyzer.php
 * A basic class for analyzing parsing trees generated by Parser
 * Lang en
 * Reviewstatus: 2025-02-28
 * Localization: complete
 * Documentation: complete
 * Tests: Unit/Parser/AnalyzerTest.php
 * Coverage: 
 */

namespace Sunhill\Parser;

use Sunhill\Basic\Base;
use Sunhill\Parser\Nodes\Node;
use Sunhill\Parser\Exceptions\IdentifierNotFoundException;
use Sunhill\Parser\Nodes\IntegerNode;
use Sunhill\Parser\Nodes\FloatNode;
use Sunhill\Parser\Nodes\StringNode;
use Sunhill\Parser\Nodes\BooleanNode;
use Sunhill\Parser\Nodes\ArrayNode;
use Sunhill\Parser\Nodes\IdentifierNode;
use Sunhill\Parser\Nodes\FunctionNode;
use Sunhill\Parser\Nodes\BinaryNode;
use Sunhill\Parser\Nodes\UnaryNode;
use Sunhill\Parser\Helpers\FunctionDescriptor;
use Sunhill\Parser\Helpers\BinaryOperatorDescriptor;

class Analyzer extends Base
{
    protected $identifiers = [];

    protected $functions = [];
    
    protected $binary_operators = [];
    
    protected $tree_root;
    
    public function __construct(Node $tree_root)
    {
        $this->tree_root = $tree_root;
    }

    public function addIdentifier(string $name, string $type): static
    {
        $this->identifiers[$name] = $type;
        
        return $this;
    }
    public function addFunction(string $name, string $return_type): FunctionDescriptor    
    {
        $item = new FunctionDescriptor($name);
        $item->setReturnType($return_type);
        $this->functions[$name] = $item;

        return $item;
    }
    
    public function addBinaryOperator(string $operator): BinaryOperatorDescriptor
    {
        $entry = new BinaryOperatorDescriptor($operator);
        
        return $entry;
    }
    
    public function checkTree()
    {
        $this->checkSubTree($this->tree_root);
    }

    protected function checkSubTree(Node $node)
    {
        switch ($node::class) {
            
        }    
    }
    
    protected function getBinaryType(BinaryNode $node)
    {
        if (isset($this->binary_operators[$node->getType()])) {
            if ($result = $this->binary_operators[$node->getType()]->matches($node->left(), $node->right())) {
                return $result;
            }
        }
        throw 
    }
    
    /**
     * Returns the datatype of the given node
     */
    protected function getTypeOfNode(Node $node): string
    {
        switch ($node::class) {
            case IntegerNode::class:
                 return 'integer';
            case FloatNode::class:
                 return 'float';
            case StringNode::class:
                 return 'string';
            case BooleanNode::class:
                 return 'boolean';
            case ArrayNode::class:
                 return 'array';
            case IdentifierNode::class:
                 return $this->getIdentifierType($node->getName());
            case FunctionNode::class:
                 return $this->getFunctionReturnType($node->name());
            case BinaryNode::class:
                 return $this->getBinaryType($node);
            case UnaryNode::class:
                 return $this->getUnaryType($node);
        }    
    } 

    /**
     * Returns the type of the whole tree
     * 
     * @return string
     */
    public function getType(): string
    {
        return $this->getTypeOfNode($this->tree_root);    
    }
    
    /**
     * Returns if the given identifier exists
     *
     * @param string $name The name of the identifier
     * @return bool True if the identiier exists otherwise false
     */
    public function hasIdentifier(string $name): bool
    {
        return isset($this->identifiers[$name]);
    }

    /**
     * Returns the type of the identifier
     *
     * @param string $name The name of the identifier
     * @return string The name of the type
     */
    protected function doGetIdentifierType(string $name): string
    {
        return $this->identifiers[$name];
    }

    /**
     * Returns the type of the identifier if it exists
     *
     * @param string $name The name of the identifier
     * @return string The name of the type
     * @throws IdentifierNotFoundException When the identifier was not found
     */
    public function getIdentifierType(string $name): string
    {
        if ($this->hasIdentifier($name)) {
            return $this->doGetIdentifierType($name);
        }
        throw new IdentifierNotFoundException("The identifier '$name' was not found.");
    }    

    /**
     * Returns true when the given function is defined
     * 
     * @param string $name The name of the function
     */
    public function hasFunction(string $name): bool
    {
        return isset($this->functions[$name]);
    }
    
    /**
     * Returns the type of the return value of the given function
     *
     * @param string $name The name of the function
     * @return string The name of the return type
     */
    public function doGetFunctionReturnType(string $name): string
    {
        return $this->functions[$name]->getReturnType();
    }

    /**
     * Returns the type of the return value of the given function if it exists
     *
     * @param string $name The name of the function
     * @return string The name of the return type
     */
    public function getFunctionReturnType(string $name): string
    {
         if ($this->hasFunction($name)) {
             return $this->doGetFunctionReturnType($name);
         }    
    }
    
}
