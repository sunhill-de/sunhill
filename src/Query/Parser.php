<?php

namespace Sunhill\Query;

class Parser extends QueryHandler
{
    const GRAMMAR = [
        'EXPRESSION'=>[['EXPRESSION','||','XOREXPRESSION'],['XOREXPRESSION']],
        'XOREXPRESSION'=>[['XOREXPRESSION','xor','ANDEXPRESSION'],['ANDEXPRESSION']],
        'ANDEXPRESSION'=>[['ANDEXPRESSION','and','COMPEXPRESSION'],['COMPEXPRESSION]],
        'COMPEXPRESSION'=>[
            ['COMPEXPRESSION','=','BETWEENEXPRESSION'],
            ['COMPEXPRESSION','!=','BETWEENEXPRESSION'],
            ['COMPEXPRESSION','>=','BETWEENEXPRESSION'],
            ['COMPEXPRESSION','<=','BETWEENEXPRESSION'],
            ['COMPEXPRESSION','>','BETWEENEXPRESSION'],
            ['COMPEXPRESSION','<','BETWEENEXPRESSION'],
            ['COMPEXPRESSION','<=>','BETWEENEXPRESSION'],
            ['COMPEXPRESSION','IS','BETWEENEXPRESSION'],
            ['BETWEENEXPRESSION'],
        ],
        'BETWEENEXPRESSION'=>[['BETWEEN','BETWEENLIMIT','AND','BETWEENLIMIT'],['LIKEEXPRESSION']],
        'LIKEEXPRESSION'=>[['VALUEFIELD','like','VALUEFIELD'],['VALUEFIELD','regexp','VALUEFIELD'],['VALUEFIELD','in','VALUEFIELD'],['BITWISEOR']],
        'BITWISEOR'=>[['VALUEFIELD','|','VALUEFIELD'],['BITWISEAND']],
        'BITWISEAND'=>[['VALUEFIELD','&','VALUEFIELD'],['SHIFTEXPRESSION']],
        'SHIFTEXPRESSION'=>[['VALUEFIELD','>>','VALUEFIELD'],['VALUEFIELD','<<','VALUEFIELD'],['ADDEXPRESSION']],
        'ADDEXPRESSION'=>[['ADDEXPRESSION','+','MULTEXPRESSION'],['ADDEXPRESSION','-','MULTEXPRESSION'],['MULTEXPRESSION']],
        'MULTEXPRESSION'=>[
            ['MULTEXPRESSION','*','BITWISEXOR'],
            ['MULTEXPRESSION','/','BITWISEXOR'],
            ['MULTEXPRESSION','%','BITWISEXOR'],
            ['MULTEXPRESSION','div','BITWISEXOR'],
            ['BITWISEXOR']
         ],
         'BITWISEXOR'=>[['VALUEFIELD','^','VALUEFIELD'],['CONCATATION']],
         'CONCATATION'=>[['CONCATATION','||','UNARYMINUS'],['UNARYMINUS']],
         'UNARYMINUS'=>[['-','NOTEXPRESSION'],['~','NOTEXPRESSION'],['NOTEXPRESSION']],
         'NOTEXPRESSION'=>[['!','BINARYEXPRESSION'],['BINARYEXPRESSION']],
         'BINARYEXPRESSION'=>[['binary','INTERVALEXPRESSION'],['collate','const'],['INTERVALLEXPRESSION']],
         'INTERVALLEXPRESSION'=>[['interval','TIMEAMOUNT','TIMEUNIT'],['VALUEEXPRESSION']]
         'VALUEEXPRESSION'=>[['const'],['field','as','identifier'],['field'],['(','EXPRESSION',')','FUNCTION']],
         'FUNCT'=>['ident|(|LIST|)'],
         'LIST'=>['EXPRESSION','EXPRESSION|,|EXPRESSION','â‚¬'],
         'ORDER'=>['field','field|asc','field|desc'],
         'ASSIGN'=>['field','=','EXPRESSION'], 
    ];

    protected $stack = [];
}  
